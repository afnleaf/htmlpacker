/*
The point of this file:
encode the wasm binaries using brotli and base64
return a Base, which means what goes into a <pre> tag inside the html

base64 is highly optimized for encode/decode
we will eventually implement base94 if there is a need

so what do we need to do to encode
we read the file from a filepath

we compress with brotli (or not)

we encode as base64

we return the id and the utf-8 compatible string
*/


use std::fs::File;
use std::io::Read;
use std::error::Error;
use base64::prelude::*;

#[derive(Debug)]
pub struct Base {
    pub id: String,
    pub sl: String,
}

impl Base {
    pub fn new(id: String, sl: String) -> Self {
        Base {
            id: id,
            sl: sl,
        }
    }
}

// get file
fn get_file_bytes(png_path: &str) -> Result<Vec<usize>, Box<dyn Error>> {
    let mut file = File::open(png_path)?;
    // read file content
    let mut buffer = Vec::new();
    Ok(file.read_to_end(&mut buffer))
}

pub fn encode_icon_svg_base64(s: String) -> String {
    BASE64_STANDARD.encode(s.as_bytes())
}

pub fn encode_text_base64(s: &str) -> Base {
    let encoded = BASE64_STANDARD.encode(s.as_bytes());

    //println!("text: {}", s);
    //println!("b64:  {}", &encoded);

    Base::new(
        String::from("bin-text"),
        encoded
    )
}

pub fn encode_png_base64(png_path: &str) -> Result<Base, Box<dyn Error>> {
    /*
    let mut file = File::open(png_path)?;
    // read file content
    let mut buffer = Vec::new();
    file.read_to_end(&mut buffer)?;
    */

    let buffer as u8 = get_file_bytes(png_path);
    let encoded = BASE64_STANDARD.encode(&buffer);

    //println!("png size: {}b", buffer.len());
    //println!("b64:  {}\n size:  {}", &encoded, encoded.len());

    Ok(Base::new(
        String::from("bin-png"),
        encoded
    ))
}

pub fn encode_wasm_base64(
    wasm_path: &str, 
    id: &str,
) -> Result<Base, Box<dyn Error>> {
    //let wasm_bytes = std::fs::read(wasm_path).unwrap();
    //base64::encode(&wasm_bytes)
    /*
    let mut file = File::open(wasm_path)?;
    let mut buffer = Vec::new();
    file.read_to_end(&mut buffer)?;
    */
    
    let buffer = get_file_bytes(png_path);
    let encoded = BASE64_STANDARD.encode(&buffer);

    Ok(Base::new(
        String::from(id),
        encoded
    ))
}

pub fn encode_wasm_base94(
    wasm_path: &str,
    id: &str,
) -> Result<Base, Box<dyn Error>> {
    println!("test");
    let mut file = File::open(wasm_path)?;
    let mut buffer = Vec::new();
    file.read_to_end(&mut buffer)?;
    println!("test2"); 
    // ncode the compressed data as base94
    let encoded = base94::encode(&buffer, 64);
    println!("test3"); 
    Ok(Base::new(
        String::from(id),
        encoded
    ))
}

pub fn encode_wasm_base64_brotli(
    wasm_path: &str, 
    id: &str,
) -> Result<Base, Box<dyn Error>> {
    //let wasm_bytes = std::fs::read(wasm_path).unwrap();
    //base64::encode(&wasm_bytes)
    let mut file = File::open(wasm_path)?;
    let mut buffer = Vec::new();
    file.read_to_end(&mut buffer)?;

    // so we have a buffer of bytes
    // lets compress with gzip/brotli
    //
    /*
    let mut compressed_buffer = Vec::new();
    {
        // Create a brotli compressor with quality 11 (highest) and window size 22
        let mut compressor = Compressor::new(
            &mut compressed_buffer, 
            4096,  // buffer size
            11,    // quality (0-11, higher is better compression)
            22     // lg_window_size (recommended 20-22)
        );
        
        // Write the original buffer to the compressor
        compressor.write_all(&buffer)?;
        
        // Ensure all data is flushed to the compressed buffer
        compressor.flush()?;
    }
    */
    // Create a buffer for compressed data
    let mut compressed_buffer = Vec::new();
    println!("brotli compression"); 
    // Use the BrotliCompress function for compression
    brotli::BrotliCompress(
        &mut &buffer[..],          // Input buffer as a Read impl
        &mut compressed_buffer,    // Output buffer as a Write impl
        &brotli::enc::BrotliEncoderParams {
            quality: 1,           // Highest quality (0-11)
            lgwin: 22,             // Window size (recommended 20-22)
            ..Default::default()   // Use defaults for other parameters
        }
    )?;
    println!("brotli done"); 
    
    // Encode the compressed data as base64
    let encoded = BASE64_STANDARD.encode(&compressed_buffer);
    //let encoded = BASE64_STANDARD.encode(&buffer);

    Ok(Base::new(
        String::from(id),
        encoded
    ))

}
