
/*
use std::f64;
use wasm_bindgen::prelude::*;

#[wasm_bindgen]
pub fn greet() -> String {
    "Hello from webassembly!".to_string()
}

#[wasm_bindgen]
pub fn hello() -> String {
    "hello".to_string()
}

#[wasm_bindgen]
pub fn goodbye() -> String {
    "goodbye".to_string()
}
*/

/*
//#[wasm_bindgen]
#[wasm_bindgen(start)]
pub fn run() {
    bare_bones();
    using_a_macro();
    using_web_sys();
}

// First up let's take a look of binding `console.log` manually, without the
// help of `web_sys`. Here we're writing the `#[wasm_bindgen]` annotations
// manually ourselves, and the correctness of our program relies on the
// correctness of these annotations!

#[wasm_bindgen]
extern "C" {
    // Use `js_namespace` here to bind `console.log(..)` instead of just
    // `log(..)`
    #[wasm_bindgen(js_namespace = console)]
    fn log(s: &str);

    // The `console.log` is quite polymorphic, so we can bind it with multiple
    // signatures. Note that we need to use `js_name` to ensure we always call
    // `log` in JS.
    #[wasm_bindgen(js_namespace = console, js_name = log)]
    fn log_u32(a: u32);

    // Multiple arguments too!
    #[wasm_bindgen(js_namespace = console, js_name = log)]
    fn log_many(a: &str, b: &str);
}

fn bare_bones() {
    log("Hello from Rust!");
    log_u32(42);
    log_many("Logging", "many values!");
}

// Next let's define a macro that's like `println!`, only it works for
// `console.log`. Note that `println!` doesn't actually work on the Wasm target
// because the standard library currently just eats all output. To get
// `println!`-like behavior in your app you'll likely want a macro like this.

macro_rules! console_log {
    // Note that this is using the `log` function imported above during
    // `bare_bones`
    ($($t:tt)*) => (log(&format_args!($($t)*).to_string()))
}

fn using_a_macro() {
    console_log!("Hello {}!", "world");
    console_log!("Let's print some numbers...");
    console_log!("1 + 3 = {}", 1 + 3);
}

// And finally, we don't even have to define the `log` function ourselves! The
// `web_sys` crate already has it defined for us.

fn using_web_sys() {
    use web_sys::console;

    console::log_1(&"Hello using web-sys".into());

    let js: JsValue = 4.into();
    console::log_2(&"Logging arbitrary values looks like".into(), &js);
}
*/

/*
#[wasm_bindgen(start)]
fn start() {
    // get DOM document from window
    let window = web_sys::window().unwrap();
    let document = window.document().unwrap();
   
    //let canvas = document.get_element_by_id("canvas").unwrap();
    //let canvas: web_sys::HtmlCanvasElement = canvas
    //    .dyn_into::<web_sys::HtmlCanvasElement>()
    //    .map_err(|_| ())
    //    .unwrap();
    
    // create a canvas
    let canvas = document.create_element("canvas").unwrap();
    let canvas: web_sys::HtmlCanvasElement = canvas
        .dyn_into::<web_sys::HtmlCanvasElement>()
        .unwrap();

    // set canvas attributes
    canvas.set_width(150);
    canvas.set_height(150);
    canvas.set_id("canvas");

    // append canvas to document body
    document.body().unwrap().append_child(&canvas).unwrap();
    
    
    let context = canvas
        .get_context("2d")
        .unwrap()
        .unwrap()
        .dyn_into::<web_sys::CanvasRenderingContext2d>()
        .unwrap();


    context.begin_path();

    // Draw the outer circle.
    context
        .arc(75.0, 75.0, 50.0, 0.0, f64::consts::PI * 2.0)
        .unwrap();

    // Draw the mouth.
    context.move_to(110.0, 75.0);
    context.arc(75.0, 75.0, 35.0, 0.0, f64::consts::PI).unwrap();

    // Draw the left eye.
    context.move_to(65.0, 65.0);
    context
        .arc(60.0, 65.0, 5.0, 0.0, f64::consts::PI * 2.0)
        .unwrap();

    // Draw the right eye.
    context.move_to(95.0, 65.0);
    context
        .arc(90.0, 65.0, 5.0, 0.0, f64::consts::PI * 2.0)
        .unwrap();

    context.stroke();
}
*/

/*
#[no_mangle]
pub extern "C" fn greet() -> *mut u8 {
    b"Hello from webassembly!".to_ptr() as *mut u8
}


#[no_mangle]
pub extern "C" fn add(a: i32, b: i32) -> i32 {
    a + b
}

#[no_mangle]
pub extern "C" fn greeting_code() -> i32 {
    42
}

#[no_mangle]
pub extern "C" fn multiply(a: i32, b: i32) -> i32 {
    a * b
}

// no worky cause pointer to js!!
#[no_mangle]
pub extern "C" fn greet() -> *mut u8 {
    b"Hello from webassembly!".as_ptr() as *mut u8
}
*/

/*
use std::f64;
use wasm_bindgen::prelude::*;

#[wasm_bindgen(start)]
fn start() {
    // get DOM document from window
    let window = web_sys::window().unwrap();
    let document = window.document().unwrap();
   
    //let canvas = document.get_element_by_id("canvas").unwrap();
    //let canvas: web_sys::HtmlCanvasElement = canvas
    //    .dyn_into::<web_sys::HtmlCanvasElement>()
    //    .map_err(|_| ())
    //    .unwrap();
    
    // create a canvas
    let canvas = document.create_element("canvas").unwrap();
    let canvas: web_sys::HtmlCanvasElement = canvas
        .dyn_into::<web_sys::HtmlCanvasElement>()
        .unwrap();

    // get window dimensions
    let width = window.inner_width().unwrap().as_f64().unwrap() as u32;
    let height = window.inner_height().unwrap().as_f64().unwrap() as u32;

    // set canvas dimensions to match window size
    canvas.set_width(width);
    canvas.set_height(height);
    canvas.set_id("canvas");
    
    // Add some CSS to ensure it fills the screen without scrollbars
    canvas.style().set_property("display", "block").unwrap();
    canvas.style().set_property("margin", "0").unwrap();
    canvas.style().set_property("padding", "0").unwrap();
    
    // append canvas to document body
    document.body().unwrap().append_child(&canvas).unwrap();
    
    // Also set the body and html styles to remove margins and prevent scrollbars
    document.body().unwrap().style().set_property("margin", "0").unwrap();
    document.body().unwrap().style().set_property("overflow", "hidden").unwrap();
    
    let context = canvas
        .get_context("2d")
        .unwrap()
        .unwrap()
        .dyn_into::<web_sys::CanvasRenderingContext2d>()
        .unwrap();


    context.begin_path();

    // Draw the outer circle.
    context
        .arc(75.0, 75.0, 50.0, 0.0, f64::consts::PI * 2.0)
        .unwrap();

    // Draw the mouth.
    context.move_to(110.0, 75.0);
    context.arc(75.0, 75.0, 35.0, 0.0, f64::consts::PI).unwrap();

    // Draw the left eye.
    context.move_to(65.0, 65.0);
    context
        .arc(60.0, 65.0, 5.0, 0.0, f64::consts::PI * 2.0)
        .unwrap();

    // Draw the right eye.
    context.move_to(95.0, 65.0);
    context
        .arc(90.0, 65.0, 5.0, 0.0, f64::consts::PI * 2.0)
        .unwrap();

    context.stroke();
}
*/

// The 3D scene setup function
/*
fn setup(
    mut commands: Commands,
    mut meshes: ResMut<Assets<Mesh>>,
    mut materials: ResMut<Assets<StandardMaterial>>,
) {
    // Log that we're setting up the scene
    web_sys::console::log_1(&"Setting up 3D scene".into());

    // circular base
    commands.spawn((
        Mesh3d(meshes.add(Circle::new(4.0))),
        MeshMaterial3d(materials.add(Color::WHITE)),
        Transform::from_rotation(Quat::from_rotation_x(-std::f32::consts::FRAC_PI_2)),
    ));
    
    // cube
    commands.spawn((
        Mesh3d(meshes.add(Cuboid::new(1.0, 1.0, 1.0))),
        MeshMaterial3d(materials.add(Color::srgb_u8(124, 144, 255))),
        Transform::from_xyz(0.0, 0.5, 0.0),
    ));

    // tetrahedron
    commands.spawn((
        Mesh3d(meshes.add(Tetrahedron::default())),
        MeshMaterial3d(materials.add(Color::srgb_u8(124, 144, 255))),
        Transform::from_xyz(0.0, 2.0, 0.0),
    ));
    
    commands.spawn((
        Mesh3d(meshes.add(ConicalFrustum::default())),
        MeshMaterial3d(materials.add(Color::srgb_u8(124, 144, 0))),
        Transform::from_xyz(2.0, 2.0, 0.0),
    ));
    
    // light
    commands.spawn((
        PointLight {
            shadows_enabled: true,
            ..default()
        },
        Transform::from_xyz(4.0, 20.0, 4.0),
    ));
    
    // camera
    commands.spawn((
        Camera3d::default(),
        Transform::from_xyz(-2.5, 4.5, 9.0).looking_at(Vec3::ZERO, Vec3::Y),
    ));
    
    // Log that scene setup is complete
    web_sys::console::log_1(&"3D scene setup complete".into());
}
*/

//not work
/*
fn on_resize(
    mut window: Single<&mut Window>,
    mut resize_reader: EventReader<WindowResized>,
) {
    for e in resize_reader.read() {
        // When resolution is being changed
        //
        web_sys::console::log_1(&"TEST--------------".into());
        window.resolution.set(e.width, e.height);
        web_sys::console::log_1(&format!("w{} {}", e.width, e.height).into());

    }

}
*/
    /*
    //let font = asset_server.load("fonts/your_font.ttf");
    let font: Handle<Font> = Default::default();
    // You may need to register the font as the default UI font
    //commands.insert_resource(UiFont(font));
    commands.spawn(TextBundle::from_section(
        "FPS: ...", // Update this text as needed
        TextStyle {
            font,
            font_size: 16.0,
            color: Color::WHITE,
        },
    ));
    //commands.spawn(PerfUiAllEntries::default());
    commands.spawn((
        PerfUiRoot {
            display_labels: false,
            layout_horizontal: true,
            values_col_width: 32.0,
            ..default()
        },
        PerfUiEntryFPSWorst::default(),
        PerfUiEntryFPS::default(),
    ));
    */
    /*
    let aspect = 0.25;
    // create a new quad mesh. this is what we will apply the texture to
    //let quad_width = 8.0;
    //let quad_handle = meshes.add(Rectangle::new(quad_width, quad_width * aspect));
    // this material renders the texture normally
    let material_handle = materials.add(StandardMaterial {
        base_color_texture: Some(texture_handle.clone()),
        alpha_mode: AlphaMode::Blend,
        unlit: true,
        ..default()
    });
    // this material modulates the texture to make it red (and slightly transparent)
    let red_material_handle = materials.add(StandardMaterial {
        base_color: Color::srgba(1.0, 0.0, 0.0, 0.5),
        base_color_texture: Some(texture_handle.clone()),
        alpha_mode: AlphaMode::Blend,
        unlit: true,
        ..default()
    });

    // and lets make this one blue! (and also slightly transparent)
    let blue_material_handle = materials.add(StandardMaterial {
        base_color_texture: Some(texture_handle),
        alpha_mode: AlphaMode::Blend,
        unlit: true,
        ..default()
    });
    */    // loading image from embedded base64
    /* 
    // load at runtime
    // Create a new image (64x64 red square)
    let mut image_data = Vec::with_capacity(64 * 64 * 4);
    for _ in 0..(64 * 64) {
        // RGBA: Red, fully opaque
        image_data.extend_from_slice(&[255, 0, 0, 255]);
    }
    
    let image = Image::new(
        Extent3d {
            width: 64,
            height: 64,
            depth_or_array_layers: 1,
        },
        TextureDimension::D2,
        image_data,
        TextureFormat::Rgba8UnormSrgb,
        ImageSampler::default(),
    );
    
    // Add the image to the asset system and get a handle
    let image_handle = asset_server.add(image);
    
    // Spawn a sprite using the created image
    commands.spawn(SpriteBundle {
        texture: image_handle,
        ..default()
    });


    // If you know the images you need at compile time, a simpler approach is to use Bevy's embedded assets feature:
    // Embed the PNG data directly in the binary
    bevy::asset::embedded_asset!(EMBEDDED_ICON, "path/to/your/icon.png");
    
    // Load the embedded asset using the AssetServer
    let icon_handle = asset_server.load(EMBEDDED_ICON);


    // Decode the base64 data
    let image_data = STANDARD.decode(base64_clean).expect("Failed to decode base64 data");
    
    // Create a new Bevy Image asset from the decoded data
    let image = Image::from_buffer(
        &image_data,
        bevy::render::texture::ImageType::Extension("png"),
        ImageSampler::default(),
        false,
    ).expect("Failed to create image from buffer");

// Add the image to Bevy's asset system
    let image_handle = asset_server.add(image);
    
    // Store the handle somewhere accessible, for example in a resource
    app.world.insert_resource(CustomImageResource(image_handle));

// A resource to store our loaded image handle
#[derive(Resource)]
struct CustomImageResource(Handle<Image>);

    */
    
// embedded assets --------------------------------------------------------
    //let crate_name = "embedded_asset";

    // The actual file path relative to workspace root is
    // "examples/asset/files/bevy_pixel_light.png".
    //
    // We omit the "examples/asset" from the embedded_asset! call and replace it
    // with the crate name.
    //let path = Path::new(crate_name).join("pyramid.png");
    //let source = AssetSourceId::from("embedded");
    //let asset_path = AssetPath::from_path(&path).with_source(source);

    //let path = Path::new("assets").join("textures/pyramid.png");
    //let source = AssetSourceId::from("embedded");
    //let asset_path = AssetPath::from_path(&path).with_source(source);

    //// You could also parse this URL-like string representation for the asset
    //// path.
    //assert_eq!(
    //    asset_path,
    //    "embedded://assets/textures/pyramid.png".into()
    //);
    //
/*
    // Use your crate name here
    let crate_name = "wasm_modules"; // or whatever your crate name is
    
    let path = Path::new(crate_name).join("../assets/textures/pyramid.png");
    // OR if you used the second approach:
    // let path = Path::new(crate_name).join("textures/pyramid.png");
    let source = AssetSourceId::from("embedded");
    let asset_path = AssetPath::from_path(&path).with_source(source);    

    //commands.spawn(Sprite::from_image(asset_server.load(asset_path)));
    //let pyramid_handle = asset_server.load("embedded://assets/textures/pyramid.png");
    println!("Current directory: {:?}", std::env::current_dir().unwrap());
    //let pyramid_handle = asset_server.load("embedded://assets/textures/pyramid.png");
    let pyramid_handle = asset_server.load(asset_path);
struct EmbeddedAssetPlugin;

impl Plugin for EmbeddedAssetPlugin {
    fn build(&self, app: &mut App) {
        // We get to choose some prefix relative to the workspace root which
        // will be ignored in "embedded://" asset paths.
        //let omit_prefix = "assets/textures";
        //let omit_prefix = "assets";
        // Path to asset must be relative to this file, because that's how
        // include_bytes! works.
        //embedded_asset!(app, omit_prefix, "pyramid.png");
        //embedded_asset!(app, omit_prefix, "../assets/textures/pyramid.png");
        embedded_asset!(app, "", "../assets/textures/pyramid.png");
    }
}
            //EmbeddedAssetPlugin::default()
            EmbeddedAssetPlugin
*/
//use web_sys::{Url, Blob};
//use js_sys::{Uint8Array, Array};
//use base64::prelude::*;
//use gltf::Gltf;
//use std::path::PathBuf;
//use std::time::Duration;
    //asset::{embedded_asset, io::AssetSourceId, AssetPath},
    //asset::{
        //io::embedded::{EmbeddedAssetRegistry},
        //embedded_asset,
    //},
    //asset::{HandleId, AssetPath, Assets, LoadState},
    //ui::TextStyle,
        //ImageType,
        //ImageSampler,
        //CompressedImageFormats
    // load base64 textures ---------------------------------------------------
    // find the id
    // window and document DOM
    //let window = web_sys::window().unwrap();
    //let document = window.document().unwrap();

    // pyramid png
    //let png_element = document.get_element_by_id("bin-png").unwrap();
    //let png_text = png_element.text_content().unwrap();
    //let png_bin_data: Vec<u8> = BASE64_STANDARD.decode(png_text).unwrap();
    /*
    let pyramid_image = Image::from_buffer(
        //&png_bin_data,
        TEXTURE_DATA,
        ImageType::Extension("png"), // Or detect format from data
        CompressedImageFormats::default(),
        true,
        ImageSampler::default(),
        RenderAssetUsages::default(),
    ).unwrap();
    */
    //let pyramid_handle = asset_server.add(pyramid_image);
    // fox model
    /*
    let model_ele = document.get_element_by_id("fox").unwrap();
    let model_text = model_ele.text_content().unwrap();
    let model_data: Vec<u8> = BASE64_STANDARD.decode(model_text).unwrap();
    */
    //let model_text = document
    //    .get_element_by_id("fox").unwrap().text_content().unwrap();
    //let model_data = BASE64_STANDARD.decode(&model_text).unwrap();
    //web_sys::console::log_1(&format!("{}", model_text).into());
   

    // FOX TESTING ------------------------------------------------------------
    // Let's try creating a Scene directly from the bytes
    //    "models/Fox.glb#Scene0",
    /*
    commands.spawn(SceneBundle {
        scene: fox_handle,
        transform: Transform::from_xyz(0.0, 0.0, 0.0).with_scale(Vec3::new(1.0, 1.0, 1.0)),
        ..default()
    });
    */
    // load a texture and retrieve its aspect ratio
    //let texture_handle = asset_server.load("textures/array_texture.png");
    //let pyramid_handle = asset_server.load("textures/pyramid.png");
    /*
    for i in 1..109 {
        let material = materials.add(StandardMaterial {
            base_color_texture: Some(textures[i].clone()),
            ..default()
        });
        commands.spawn((
            Mesh3d(shap.clone()),
            MeshMaterial3d(material.clone()),
            Transform::from_xyz(-5.0+(i as f32), 0.0, -5.0).with_scale(Vec3::new(0.07, 0.07, 0.07)).with_rotation(Quat::from_rotation_x(-PI / 4.)),
            Shape,
        ));
    }
    */
    /*
    // Spawn a single entity with the instance data component
    commands.spawn((
        Mesh3d(prism_mesh),
        MeshMaterial3d(material),
        EarthInstanceData { instances },
        Transform::default(),
    ));
    */

    /*
    commands.spawn((
        Mesh3d(prism_mesh),
        MeshMaterial3d(material),
        EarthElevationPoints { instances },
        Transform::default(),
    ));
    */
    /* 
    spawn_beam_to_origin(
        &mut commands,
        &mut meshes,
        p2.clone(), // Use your existing material
        Vec3::new(5.0, 3.0, -2.0)
    );
    */
#[derive(Component, Default)]
struct EarthInstanceData {
    instances: Vec<InstanceData>
}

#[derive(Clone, Copy, ShaderType)]
struct InstanceData {
    position: Vec3,
    scale: Vec3,
    rotation: Mat4,
}

fn setup_earth_elevation_points(
    vertices: &[Vec3],
    elevation: &[i16],
    height: usize,
    width: usize,
) -> Vec<InstanceData> {
    let mut instances = Vec::with_capacity(height * width);
    
    for i in 0..height {
        for j in 0..width {
            let n = i * width + j;
            let vertex_pos = vertices[n];
            let elevation_value = elevation[n] as f32;
            let elevation_scale = (elevation_value / 8000.0).max(0.01) * 0.5;
            
            // Convert Quat to Mat4 for shader compatibility
            let direction = vertex_pos.normalize();
            let rotation_quat = Quat::from_rotation_arc(Vec3::Z, direction);
            let rotation_mat = Mat4::from_quat(rotation_quat);
            
            instances.push(InstanceData {
                position: vertex_pos,
                scale: Vec3::new(0.05, 0.05, elevation_scale),
                rotation: rotation_mat,
            });
        }
    }
    
    instances
}

// And update your system to:
/*
fn update_elevation_instances(
    // Use specific query type - no generics
    mut commands: Commands,
    query: Query<(Entity, &EarthInstanceData), Changed<EarthInstanceData>>,
    mut meshes: ResMut<Assets<Mesh>>, 
) {
    for (entity, instance_data) in &query {
        // For Bevy 0.15, we need a different approach
        // You might need to extract the instance data and send it to the GPU
        // This is a simplified version
        let mesh_handle = meshes.add(Mesh::new(PrimitiveTopology::TriangleList, RenderAssetUsages::RENDER_WORLD));
        
        // Add instance data
        commands.entity(entity).insert(mesh_handle);
    }
}
*/
    /*
    let mut instances = Vec::with_capacity(e.height * e.width);
    for i in 0..e.height {
        for j in 0..e.width {
            let n = i * e.width + j;
            let vertex_pos = vertices[n];
            let elevation_value = e.elevation[n] as f32;
            let elevation_scale = (elevation_value / 8000.0).max(0.01) * 0.5;               instances.push(InstanceData {
                position: vertex_pos,
                scale: Vec3::new(0.05, 0.05, elevation_scale),
                rotation: Quat::from_rotation_arc(Vec3::Z, 
                    vertex_pos.normalize()),
            });
        }
    }
    */
/*
fn calculate_vertices(e: &ElevationData) -> Vec<Vec3> {
    let mut vertices: Vec<Vec3> = Vec::with_capacity(e.height * e.width);
    let r = 2.0_f64; // Use f64 for intermediate calculations for precision

    // Ensure dimensions are not zero to avoid division by zero
    if e.height <= 1 || e.width == 0 { // width can be 1 for a line, but height needs > 1 for lat range
        return vertices;
    }

    for i in 0..e.height {
        // Map i from [0, height-1] to [-90, 90] degrees (latitude)
        // Corrected mapping: ensures endpoints map correctly. Use f64 for division.
        let lat_deg = -90.0 + (i as f64 * 180.0 / (e.height as f64 - 1.0));
        let lat_rad = lat_deg.to_radians(); // Use inherent method

        // The radius projected onto the equatorial (XZ in Bevy) plane depends on latitude
        let radius_at_lat = r * lat_rad.cos();

        // Bevy's Y coordinate depends only on latitude
        let bevy_y = r * lat_rad.sin();

        for j in 0..e.width {
             // Map j from [0, width-1] to [-180, 180] degrees (longitude)
             // If width represents a full circle (e.g., 360 points), the last point overlaps the first.
             // A common approach is to map to [0, 360) or [-180, 180).
             // Using `e.width` in the denominator makes the step `360.0 / e.width`.
             // Example: if width = 360, j goes 0..359 -> lon_deg = -180 + j * 1.0
             // Example: if width = 361, j goes 0..360 -> lon_deg = -180 + j * (360/360) = -180 + j
             // Mapping to [-180, 180] inclusive:
             let lon_deg = -180.0 + (j as f64 * 360.0 / (e.width as f64 - 1.0));
            // Alternative mapping to [0, 360) often used with textures/wrapping:
            // let lon_deg = j as f64 * 360.0 / e.width as f64;

            let lon_rad = lon_deg.to_radians(); // Use inherent method

            // Bevy's X and Z coordinates depend on longitude and the radius at this latitude
            let bevy_x = radius_at_lat * lon_rad.cos();
            let bevy_z = radius_at_lat * lon_rad.sin(); // Standard Y becomes Bevy's Z

            // --- Optional: Incorporate Elevation ---
            // If you want to use the elevation data:
            // let elevation_index = i * e.width + j;
            // let current_elevation = e.elevation.get(elevation_index).copied().unwrap_or(0.0);
            // let scale_factor = 0.01; // Adjust how much elevation affects the radius
            // let adjusted_r = r + current_elevation * scale_factor;
            // // Recalculate x, y, z using adjusted_r instead of r
            // let radius_at_lat = adjusted_r * lat_rad.cos();
            // let bevy_y = adjusted_r * lat_rad.sin();
            // let bevy_x = radius_at_lat * lon_rad.cos();
            // let bevy_z = radius_at_lat * lon_rad.sin();
            // --- End Optional Elevation ---


            // Push the vertex with coordinates correctly mapped for Bevy (Y-up)
            // Cast to f32 at the end
            vertices.push(Vec3::new(bevy_x as f32, bevy_y as f32, bevy_z as f32));
        }
    }

    vertices
}
*/
// bevy vec struct?
/*
fn calculate_vertices(e: &ElevationData) -> Vec<Vec3> {
    let mut vertices: Vec<Vec3> = Vec::with_capacity(e.height * e.width);

    for i in 0..e.height { //latitude
        for j in 0..e.width { //longitude
            //println!("Elevation at {},{}: {}", 
            //    i, j, e.elevation[i * e.width + j]);

            // calculate 3d position from latitude and longitude
            use std::f64::consts::PI;
            //let a = x.tan();
            //let b = x.sin() / x.cos();
            //let r = 6378 // radius in km
            let r = 2.0;
            let a = PI / 180.0;
            let r_la = i as f64 * a;
            let r_lo = j as f64 * a;

            let x = (r * r_la.cos() * r_lo.cos()) as f32;
            let y = (r * r_la.cos() * r_lo.sin()) as f32;
            let z = (r * r_la.sin()) as f32;

            vertices.push(Vec3::new(x, y, z));
            //println!("x{} y{} z{}", x, y, z);
        }
    }

    vertices
}
*/






/*
fn spawn_beam_to_origin(
    commands: &mut Commands,
    meshes: &mut ResMut<Assets<Mesh>>,
    material: Handle<StandardMaterial>,
    target_position: Vec3
) {
    // Calculate the length of the beam
    let length = target_position.length();
    
    if length > 0.0 {
        // Create a 1x1 rectangular extrusion
        let mesh_handle = meshes.add(Extrusion::new(Rectangle::new(0.1, 0.1), length));
        
        // Calculate midpoint for positioning
        let midpoint = target_position / 2.0;
        
        // Calculate rotation to align with the target direction
        // Default extrusion is along the z-axis, so rotate from z to target
        let direction = target_position.normalize();
        let rotation = Quat::from_rotation_arc(Vec3::Z, direction);
        
        // Spawn the entity
        commands.spawn((
            Mesh3d(mesh_handle),
            MeshMaterial3d(material.clone()),
            Transform::from_translation(midpoint)
                   .with_rotation(rotation),
            //Shape,
        ));
    }
}
*/
    /*
    so what we do next, assets, what do we need them for?
    textures -> materials -> meshesh
    models -> objects, characters

    we have a bunch of textures we want to apply
    we want to load them all at the same time in an array of 109 size
let textures: Vec<Handle<Image>> = (1..=109)
        .map(|i| asset_server.load(format!("textures/texture_{}.png", i)))
        .collect();
let material = materials.add(StandardMaterial {
            base_color_texture: Some(textures[i].clone()),
            ..default()
        });
    let mesh_handle = meshes.add(Sphere::default().mesh().uv(32, 18));
    
commands.spawn((
            PbrBundle {
                mesh: mesh_handle.clone(),
                material,
                transform: Transform::from_translation(position),
                ..default()
            },
            Shape, // Your marker component
        ));
    */
    //decompressor.read_to_end(&mut decompressed)
    //println!("{:?}", decompressed);
